# 角色与目标 (Role and Goal)
你是一位经验丰富的软件架构师和高级产品经理。你的任务是基于一个清晰的商业想法，撰写一份全面、专业且可执行的项目文档。这份文档将用于指导开发团队完成整个项目的构建。

# 主要任务 (Primary Task)
请根据下文提供的项目背景和关键要求，生成一份详细的项目构建文档。该文档必须清晰地分为两个主要部分：
1.  **详细任务要求 (Detailed Task Requirements):** 从产品和用户的角度，描述项目需要实现的功能、用户故事和非功能性要求。
2.  **技术实现方案 (Technical Implementation Plan):** 从技术实现的角度，提供推荐的技术栈、系统架构、核心模块设计和数据流。

# 项目背景：可信插件市场 (Project Background: Trusted Plugin Marketplace)
我们要构建一个名为“AstrBot 可信插件市场”的 Web 平台。该平台的核心价值是利用大型语言模型 (LLM) 对 GitHub 上的插件代码进行自动化安全审计，为用户提供一个安全可靠的插件下载和发现渠道。

- **对于访客：** 他们可以浏览、搜索和查看所有已通过安全审核的插件。
- **对于开发者：** 他们可以通过 GitHub 账号登录，提交自己的插件仓库以供审核。系统会自动跟踪插件的版本更新，对新版本进行持续的安全审计。如果发现安全问题（如后门、恶意代码），插件将被自动下架，并通知开发者。

# 关键要求与约束 (Key Requirements and Constraints)
1.  **插件元数据:** 插件的核心元数据（名称、作者、版本、描述等）位于其 GitHub 仓库根目录下的 `metadata.yaml` 文件中。你必须围绕这个文件进行设计。示例如下：
    ```yaml
    name: astrbot_plugin_deepresearch
    author: lxfight
    version: 0.1.0
    description: 一个根据用户问题进行深度网络研究并生成报告的插件。
    repo: "https://github.com/lxfight/astrbot_plugin_deepresearch"
    ```
2.  **LLM 审核核心:** 系统的核心是 LLM 代码审核。
    - **API 兼容性:** 技术方案中的 LLM 调用部分，应主要围绕兼容 **OpenAI Chat Completions API** 格式进行设计。
    - **可扩展性:** 架构上必须设计一个 **LLM 服务的抽象层**，以便未来可以轻松地切换或集成其他模型提供商（如 Anthropic Claude, Google Gemini）或本地部署的模型，而无需重构大量代码。
3.  **开发者流程:**
    - 使用 **GitHub OAuth 2.0** 进行开发者登录授权。
    - 开发者登录后，可以从其拥有的仓库列表中选择并提交插件。
4.  **自动化流程:**
    - 首次审核通过后，系统必须通过 GitHub API **自动为仓库安装 Webhook**。
    - Webhook 监听 `push` 事件，当检测到 `metadata.yaml` 中的 `version` 字段发生变化时，自动触发对新版本的审核流程。
5.  **安全与通知:**
    - 如果新版本审核发现严重安全问题，插件状态应被**自动更新为“已下架”**（delisted），并在前端市场中隐藏。
    - 系统必须通过**邮件和/或自动创建 GitHub Issue** 的方式，及时将下架原因和 LLM 的分析报告通知给原作者。
6.  **异步处理:**
    - 代码的克隆、分析和 LLM 调用是耗时操作，必须在**后台异步任务队列**中执行，以保证系统接口的快速响应。
# 输出格式要求 (Output Format Requirements)
请严格按照以下结构，使用 Markdown 格式进行输出。确保内容详尽、逻辑清晰、专业性强。
## 1. 详细任务要求 (Detailed Task Requirements)
   ### 1.1 项目愿景与目标
   ### 1.2 用户画像与故事
      - 1.2.1 访客 (Visitor)
      - 1.2.2 插件开发者 (Developer)
   ### 1.3 核心功能点 (Features)
      - 1.3.1 公开插件市场
      - 1.3.2 开发者中心
      - 1.3.3 自动化审核引擎
      - 1.3.4 通知系统
   ### 1.4 非功能性要求
      - 1.4.1 安全性
      - 1.4.2 性能
      - 1.4.3 可靠性
## 2. 技术实现方案 (Technical Implementation Plan)
   ### 2.1 推荐技术栈
   ### 2.2 系统架构设计
      - 2.2.1 整体架构图
      - 2.2.2 组件说明
   ### 2.3 核心模块设计
      - 2.3.1 用户认证模块 (GitHub OAuth)
      - 2.3.2 插件提交流程模块
      - 2.3.3 异步审核 Worker 模块
      - 2.3.4 LLM 审核服务抽象层
      - 2.3.5 GitHub Webhook 监听与处理模块
   ### 2.4 数据模型设计 (数据库表结构)
      - 2.4.1 Users 表
      - 2.4.2 Plugins 表
      - 2.4.3 Audits 表
   ### 2.5 关键流程数据流图
      - 2.5.1 开发者首次提交插件流程
      - 2.5.2 插件版本更新自动审核流程